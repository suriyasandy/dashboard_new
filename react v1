function App() {
  const productTypes = ['FX', 'Equities', 'Derivatives'];
  const legalEntities = ['HBSG', 'HBUS', 'ALL'];
  const sourceSystems = ['Murex', 'Calypso', 'Summit'];

  const [productType, setProductType] = useState('');
  const [legalEntity, setLegalEntity] = useState('');
  const [sourceSystem, setSourceSystem] = useState('');
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');
  const [thresholdMode, setThresholdMode] = useState('groupwise');
  const [thresholdFile, setThresholdFile] = useState(null);

  const handleFileUpload = (e) => {
    setThresholdFile(e.target.files[0]);
  };

  return (
    <div className="App">
      <h1>GFX Threshold Deviation Dashboard</h1>

      <div className="sidebar">
        <h2>Filters</h2>

        <label>
          Product Type:
          <select value={productType} onChange={(e) => setProductType(e.target.value)}>
            <option value="">Select Product Type</option>
            {productTypes.map((type) => (
              <option key={type} value={type}>{type}</option>
            ))}
          </select>
        </label>

        <label>
          Legal Entity:
          <select value={legalEntity} onChange={(e) => setLegalEntity(e.target.value)}>
            <option value="">Select Legal Entity</option>
            {legalEntities.map((entity) => (
              <option key={entity} value={entity}>{entity}</option>
            ))}
          </select>
        </label>

        <label>
          Source System:
          <select value={sourceSystem} onChange={(e) => setSourceSystem(e.target.value)}>
            <option value="">Select Source System</option>
            {sourceSystems.map((system) => (
              <option key={system} value={system}>{system}</option>
            ))}
          </select>
        </label>

        <label>
          Start Date:
          <input type="date" value={startDate} onChange={(e) => setStartDate(e.target.value)} />
        </label>

        <label>
          End Date:
          <input type="date" value={endDate} onChange={(e) => setEndDate(e.target.value)} />
        </label>

        <label>
          Threshold Mode:
          <select value={thresholdMode} onChange={(e) => setThresholdMode(e.target.value)}>
            <option value="groupwise">Group-wise</option>
            <option value="currencywise">Currency-wise</option>
          </select>
        </label>

        <label>
          Upload Threshold File:
          <input type="file" onChange={handleFileUpload} />
        </label>
      </div>

      <div className="dashboard">
        <h2>Threshold View & Impact Analysis</h2>
        {/* Placeholder for dynamic tables and charts */}
        <p>Data visualizations will be displayed here.</p>
      </div>
    </div>
  );
}

export default App;
